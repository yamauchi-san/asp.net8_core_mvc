@* ビューで求められるオブジェクトの型が指定 *@
@* @model IEnumerable<MvcMovie.Models.Movie> *@
@model MvcMovie.Models.MovieGenreViewModel

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
@* コントローラーファイルMoviesController.csとIndex関数を指定 *@
<form asp-controller="Movies" asp-action="Index" method="get">
    <p>
        <label>Genre:</label>
        @* MovieGenreViewModel.csのMovieGenreとGenresを指定 *@
        <select asp-for="MovieGenre" asp-items="Model.Genres">
            <option value="">All</option>
        </select>

        @* MovieGenreViewModel.csのSearchStringを指定 *@
        <label>Title: <input type="text" name="SearchString" /></label>
        <input type="submit" value="Filter" />
    </p>
</form>
<table class="table">
    <thead>
        <tr>
            <th>
                @* @Html.DisplayNameFor(model => model.Title) *@
                @* MovieGenreViewModel.csのMovesはリスト型で帰ってきているのでそのTitleを取得 *@
                @* DisplayNameForなのでフィールド名(カラム名)を表示するので![0](null許容)にする *@
                @Html.DisplayNameFor(model => model.Movies![0].Title)
            </th>
            <th>
                @* @Html.DisplayNameFor(model => model.ReleaseDate) *@
                @Html.DisplayNameFor(model => model.Movies![0].ReleaseDate)
            </th>
            <th>
                @* @Html.DisplayNameFor(model => model.Genre) *@
                @Html.DisplayNameFor(model => model.Movies![0].Genre)
            </th>
            <th>
                @* @Html.DisplayNameFor(model => model.Price) *@
                @Html.DisplayNameFor(model => model.Movies![0].Price)
            </th>
            @* 新しいフィールド(カラム)を追加 *@
            <th>
                @* @Html.DisplayNameFor(model => model.Rating) *@
                @Html.DisplayNameFor(model => model.Movies![0].Rating)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@* @foreach (var item in Model) { *@
    @* MovieGenreViewModel.csのMoviesはリスト型なのでforeachで繰り返し処理で要素を取得 *@
    @foreach (var item in Model.Movies!)
        {
        <tr>
            <td>
                @* itemのTitleを取得 *@
                @Html.DisplayFor(modelItem => item.Title)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ReleaseDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Genre)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Price)
            </td>
            @* 新しいフィールド(カラム)を追加 *@
            <td>
                @Html.DisplayFor(modelItem => item.Rating)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>
